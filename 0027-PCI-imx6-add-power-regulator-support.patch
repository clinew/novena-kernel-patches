From 6289137ee56096ffbd1ff2b11e91005cf72e346e Mon Sep 17 00:00:00 2001
From: Sean Cross <xobs@kosagi.com>
Date: Thu, 7 Jan 2016 14:05:10 +0800
Subject: [PATCH 27/65] PCI: imx6: add power regulator support

Add support for 3.3V and 1.5V power regulators.

Signed-off-by: Sean Cross <xobs@kosagi.com>
---
 drivers/pci/host/pci-imx6.c | 87 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 87 insertions(+)

diff --git a/drivers/pci/host/pci-imx6.c b/drivers/pci/host/pci-imx6.c
index 22e8224..5aabb6a 100644
--- a/drivers/pci/host/pci-imx6.c
+++ b/drivers/pci/host/pci-imx6.c
@@ -22,6 +22,7 @@
 #include <linux/pci.h>
 #include <linux/platform_device.h>
 #include <linux/regmap.h>
+#include <linux/regulator/consumer.h>
 #include <linux/resource.h>
 #include <linux/signal.h>
 #include <linux/types.h>
@@ -31,8 +32,12 @@
 
 #define to_imx6_pcie(x)	container_of(x, struct imx6_pcie, pp)
 
+static struct pcie_port *g_pp;
+
 struct imx6_pcie {
 	int			reset_gpio;
+	struct regulator	*vdd3p3;
+	struct regulator	*vdd1p5;
 	struct clk		*pcie_bus;
 	struct clk		*pcie_phy;
 	struct clk		*pcie;
@@ -556,6 +561,57 @@ static int __init imx6_add_pcie_port(struct pcie_port *pp,
 	return 0;
 }
 
+static int imx6_pcie_late_suspend(void)
+{
+	struct imx6_pcie *imx6_pcie = to_imx6_pcie(g_pp);
+
+	regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1,
+			IMX6Q_GPR1_PCIE_TEST_PD, IMX6Q_GPR1_PCIE_TEST_PD);
+
+	if (imx6_pcie->vdd3p3) {
+		int ret;
+		ret = regulator_disable(imx6_pcie->vdd3p3);
+		if (ret)
+			dev_err(imx6_pcie->pp.dev,
+				"unable to disable 3.3V regulator: %d\n", ret);
+	}
+	if (imx6_pcie->vdd1p5) {
+		int ret;
+		ret = regulator_disable(imx6_pcie->vdd1p5);
+		if (ret)
+			dev_err(imx6_pcie->pp.dev,
+				"unable to disable 1.5V regulator: %d\n", ret);
+	}
+
+	return 0;
+}
+
+static int imx6_pcie_early_resume(void)
+{
+	struct imx6_pcie *imx6_pcie = to_imx6_pcie(g_pp);
+
+	if (imx6_pcie->vdd3p3) {
+		int ret;
+		ret = regulator_enable(imx6_pcie->vdd3p3);
+		if (ret)
+		dev_err(imx6_pcie->pp.dev,
+			"unable to enable 3.3V regulator: %d\n", ret);
+	}
+	if (imx6_pcie->vdd1p5) {
+		int ret;
+		ret = regulator_enable(imx6_pcie->vdd1p5);
+		if (ret)
+		dev_err(imx6_pcie->pp.dev,
+			"unable to enable 1.5V regulator: %d\n", ret);
+	}
+
+	regmap_update_bits(imx6_pcie->iomuxc_gpr, IOMUXC_GPR1,
+			IMX6Q_GPR1_PCIE_TEST_PD, 0);
+
+	return 0;
+}
+
+
 static int __init imx6_pcie_probe(struct platform_device *pdev)
 {
 	struct imx6_pcie *imx6_pcie;
@@ -570,6 +626,7 @@ static int __init imx6_pcie_probe(struct platform_device *pdev)
 
 	pp = &imx6_pcie->pp;
 	pp->dev = &pdev->dev;
+	g_pp = pp;
 
 	/* Added for PCI abort handling */
 	hook_fault_code(16 + 6, imx6q_pcie_abort_handler, SIGBUS, 0,
@@ -591,6 +648,36 @@ static int __init imx6_pcie_probe(struct platform_device *pdev)
 		}
 	}
 
+	imx6_pcie->vdd3p3 = devm_regulator_get_optional(&pdev->dev, "vdd3p3");
+	if (IS_ERR(imx6_pcie->vdd3p3)) {
+		ret = PTR_ERR(imx6_pcie->vdd3p3);
+		if (ret == -EPROBE_DEFER)
+			return ret;
+		imx6_pcie->vdd3p3 = NULL;
+	}
+	else {
+		ret = regulator_enable(imx6_pcie->vdd3p3);
+		if (ret) {
+			dev_err(&pdev->dev, "unable to enable regulator: %d\n",
+				ret);
+			return ret;
+		}
+	}
+
+	imx6_pcie->vdd1p5 = devm_regulator_get_optional(&pdev->dev, "vdd1p5");
+	if (IS_ERR(imx6_pcie->vdd1p5)) {
+		ret = PTR_ERR(imx6_pcie->vdd1p5);
+		imx6_pcie->vdd1p5 = NULL;
+	}
+	else {
+		ret = regulator_enable(imx6_pcie->vdd1p5);
+		if (ret) {
+			dev_err(&pdev->dev, "unable to enable regulator: %d\n",
+				ret);
+			return ret;
+		}
+	}
+
 	/* Fetch clocks */
 	imx6_pcie->pcie_phy = devm_clk_get(&pdev->dev, "pcie_phy");
 	if (IS_ERR(imx6_pcie->pcie_phy)) {
-- 
2.7.3

